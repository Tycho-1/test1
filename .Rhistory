d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
.47*101-50*exp(.02*(2/12))-8.47
.47*101-50*exp(.02*(2/12))
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
pnorm(d1)
.59*101-50*exp(.02*(2/12))
.59*101-50*exp(.02*(2/12))-8.47
.59*101-50*exp(.05*(2/12))-8.47
.47*101-50*exp(.05*(2/12))-8.47
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 98; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 2/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
.47*101-50*exp(.05*(2/12))-3.65
.47*101-(.47*101)*exp(.05*(2/12))-8.47
100/((1+.035)^(3/12))
100/((1+.03)^(3/12))
100/((1+.035)^(6/12))
100/((1+.03)^(6/12))
100/((1.0195)^(2/12))
100/((1.025)^(1/12))
100/((1.015)^(1/12))
99.67865*(1.02^(1/12))
(99.84328-99.87601)/(99.7944-99.87601)
p<-(99.84328-99.87601)/(99.7944-99.87601)
1/(1.02^(1/12))*(p*1+(1-p)*2)
pnorm(d1)
exp(.05*(2/12))
exp(.05*(1/12))
exp(.05*(2/12))*50
exp(.05*(1/12))*50
.5645-.47
.47*101-(.47*101)*exp(.05*(2/12))-8.47+.0945*98*exp(.5*(1/12))
r <- .05; sigma <- .25; T <- 3/12; t <- 0; St <- 100; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
C*1.08
pnorm(d1)
pnorm(d1)*100-C*1.08
C*1.08+pnorm(d1)*-2
r <- .05; sigma <- .25; T <- 2/12; t <- 0; St <- 98; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
pnorm(d1)
4.917184+pnorm(d1)*3
.5645439-pnorm(d1)
(.5645439-pnorm(d1))*98
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
.4739817*101-50.40812*exp(.05*(2/12))+8.875099*exp(.05*(1/12))-8.471312
.4739817*101-50.40812*exp(.05*(2/12))+8.875099-8.471312
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
pnorm(d1)
(.5645439-.4739817)*98
50.40812*exp(.05*(1/12))-8.875099
(50.40812*exp(.05*(1/12))-8.875099)*exp(.05*(1/12))
.4739817*101- (50.40812*exp(.05*(1/12))-8.875099)*exp(.05*(1/12)) -8.471312
.4739817*101- (50.40812*exp(.05*(1/12))-8.875099)*exp(.05*(1/12)) -3.65
r <- .05; sigma <- .25; T <- 2/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 3/12; t <- 0; St <- 100; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
q
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100; q<-0
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q + (sigma^2)/2)*(T-t)))
d2 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r -q - (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
r <- .05; sigma <- .25; T <- 1/12; t <- 0; St <- 101; K <- 100;
d1 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r + (sigma^2)/2)*(T-t)))
d2 <- (1/(sigma*sqrt(T-t))*(log(St/K) + (r - (sigma^2)/2)*(T-t)))
C <- St*pnorm(d1) - K*exp(-r*(T-t))*pnorm(d2); C
.4739817*101- (50.40812*exp(.05*(1/12))-8.875099)*exp(.05*(1/12)) -C
702*.25
install.packages("rJava")
install.packages("xlsxjars")
library(xlsx)
predict(fitModel_rf,testing)
install.packages("janeaustenr")
library(janeaustenr)
austen_books()
austen_books()[1]
austen_books()[1][1]
austen_books()[1][1][1]
?%>%
K <- 50
C<- 10
call_opt <-function(x,y){
if (x<K) {y<-(-C)}
else {y=-C+x-K}
y
}
library(ggplot2)
qplot(1.5*((1:1e4*K)/1e4),as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt)),col="red")+geom_hline(yintercept=0,col="blue")
qplot(1.5*((1:1e4*K)/1e4),-as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt)),col="red")+geom_hline(yintercept=0,col="blue")
K <- 50
C<- 10
c1<-as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt))
K <- 60
C<- 15
c2<-as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt))
qplot(1.5*((1:1e4*K)/1e4),-c1+c2,col="red")+geom_hline(yintercept=0,col="blue")
P <- 10
put_opt <- function(x,y){
if (x>K) {y<-(-P)}
else {y= -P+K-x}
y
}
qplot(1.5*((1:1e4*K)/1e4),as.numeric(lapply(1.5*((1:10000*K)/10000),put_opt)),col="red")+geom_hline(yintercept=0,col="blue")
qplot(1.5*((1:1e4*K)/1e4),-as.numeric(lapply(1.5*((1:10000*K)/10000),put_opt)),col="red")+geom_hline(yintercept=0,col="blue")
K <- 40
C<- 8
p1<-as.numeric(lapply(1.5*((1:10000*K)/10000),put_opt))
qplot(1.5*((1:1e4*K)/1e4),p1-c2,col="red")+geom_hline(yintercept=0,col="blue")
g1 <- qplot(1.5*((1:1e4*K)/1e4),as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt)),col="red")+geom_hline(yintercept=0,col="blue")+theme_bw()
g2 <- qplot(1.5*((1:1e4*K)/1e4),-as.numeric(lapply(1.5*((1:10000*K)/10000),call_opt)),col="red")+geom_hline(yintercept=0,col="blue")+theme_bw()
g3 <- qplot(1.5*((1:1e4*K)/1e4),as.numeric(lapply(1.5*((1:10000*K)/10000),put_opt)),col="red")+geom_hline(yintercept=0,col="blue")+theme_bw()
g4 <- qplot(1.5*((1:1e4*K)/1e4),-as.numeric(lapply(1.5*((1:10000*K)/10000),put_opt)),col="red")+geom_hline(yintercept=0,col="blue")+theme_bw()
library(gridExtra)
grid.arrange(g1,g2,g3,g4,ncol=2,nrow=2)
resettest()
install.packages("lmtest")
?resettest
library(lmtest)
?resettest
?chow
?Chow
install.packages("gap")
library(gap)
g1
rm(list=ls())
shiny::runApp('D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject1')
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject1")
unigram <- readRDS("unigram.RDS")
bigram <- readRDS("bigram.RDS")
trigram <- readRDS("trigram.RDS")
fourgram <- readRDS("fourgram.RDS")
bigram1<-bigram[1:20000]
bigram1<-bigram[1:20000,]
for (i in (1:nrow(bigram1))) {
temp<- take_firstWords(bigram1[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[i,3]<- bigram1[i,2]/(find_exactMatch(unigram,temp)[2])
}
find_phrase <- function(ngram,phrase){
ngram[grepl(paste0("^",phrase), ngram[,1]),]
}
take_words<-function(sentence,n){
sentence_t <-tokenize(as.character(sentence),removePunct = TRUE)
l<-length(sentence_t[[1]])
if (l<n) {n=l}
phrase<- sentence_t[[1]][(l-n+1):l]
if (n == 5) { phrase = paste(phrase[1],phrase[2],phrase[3],phrase[4],phrase[5])}
if (n == 4) { phrase = paste(phrase[1],phrase[2],phrase[3],phrase[4])}
if (n == 3) { phrase = paste(phrase[1],phrase[2],phrase[3])}
if (n == 2) { phrase = paste(phrase[1],phrase[2])}
phrase
#   for (i in seq(n)) {
#       phrase<-paste(phrase[i])
#   }
}
take_firstWords <- function(nGrams,n){
nGram_t <- tokenize(as.character(nGrams))
nGram_t[[1]][1:n]
}
find_suggestion <-function(ngram,phrase){
ngram[grepl(paste0("^",phrase), ngram[,1]),]
}
find_exactMatch <- function(ngram,Match){
ngram[grepl(paste0("^",Match,"$"), ngram[,1]),]
}
take_lastWord <- function(phrase){
listWords<-take_words(phrase,1)
}
final_suggestion <- function(suggestion,m){
if (nrow(suggestion)<m) { m <- nrow(suggestion)}
temp<- data.frame(rep(0,m))
names(temp) <- c("suggestion")
for (i in seq(m)){ temp[i,1] <-take_lastWord(suggestion[i,1]) }
temp
}
for (i in (1:nrow(bigram1))) {
temp<- take_firstWords(bigram1[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[i,3]<- bigram1[i,2]/(find_exactMatch(unigram,temp)[2])
}
bigram[1:180,]
bigram1[1:180,]
for (i in (178:nrow(bigram1))) {
temp<- take_firstWords(bigram1[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[i,3]<- bigram1[i,2]/(find_exactMatch(unigram,temp)[2])
}
warnings()
bigram1[12888,]
bigram1[12887,]
bigram1[1288,]
find_suggestion(fourgram,phrase)
find_suggestion(bigram1,"woman")
find_suggestion(bigram1,"man")
find_suggestion(bigram1,"man ")
find_suggestion(trigram,"man ")
find_suggestion(trigram,"man who")
find_suggestion(trigram,"man who ")
find_suggestion <-function(ngram,phrase){
ngram[grepl(paste0("^",phrase," "), ngram[,1]),]
}
find_suggestion(bigram1,"man")
shiny::runApp()
for (i in (12887:nrow(bigram1))) {
temp<- take_firstWords(bigram1[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[i,3]<- bigram1[i,2]/(find_exactMatch(unigram,temp)[2])
}
take_firstWords(trigram[1,1],2)
take_firstWords(trigram[1,1],3)
for (j in (1:nrow(trigram))) {
temp<- take_firstWords(trigram[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
for (j in (1:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
for (j in (1:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
temp<- take_firstWords(trigram[j,1],2)
bigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
trigram[j,2]
find_exactMatch(bigram,temp)[2]
temp
temp[1]
temp <- paste(temp[1],temp[2])
find_exactMatch(bigram,temp)[2]
bigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
trigram1[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
for (j in (1:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
trigram[1:20,]
for (j in (214:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
for (j in (6829:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
trigram[120:140,]
find_suggestion(trigram,"one of")
find_suggestion(trigram,"many in")
unigram[1:10]
unigram[1:10,]
unigram[1:60,]
for (j in (12042:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
stopwords()
a<-stopwords()
a
a<-c(a,"hjkkll")
a
a<-c(stopwords(),"hjkkll")
a
stopwords(kind="de")
c(stopwords(),"â","s","t")
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject1")
saveRDS(trigram,"trigram.RDS")
saveRDS(bigram1,"bigram1.RDS")
shiny::runApp()
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone")
con <- file("en_US.twitter.txt", "r")
dataTwitter <- readLines(con)
close(con)
con <- file("en_US.blogs.txt", "r")
dataBlogs <- readLines(con)
close(con)
con <- file("en_US.news.txt", "r")
dataNews <- read.table(con,sep="\n",quote = "", header=F,stringsAsFactors = F)
close(con)
testTwitter <- sample(dataTwitter,5e4)
testNews <- sample(dataNews[,1],5e4)
testBlogs <- sample(dataBlogs,5e4)
testBlogs[1]
shiny::runApp('CapstoneProject1')
test <- cbind(testNews,testBlogs,testTwitter)
rm(dataNews,dataBlogs,testBlogs,testNews,dataTwitter)
unigram<-tokenize(toLower(test), removePunct = TRUE, removeNumbers = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE, removeHyphens = TRUE, concatenator = " ",ngrams = 1)
unigram<-dfm(unigram,ignoredFeatures= c(stopwords(),"â","s","t"))
unigram<-sort(colSums(unigram),decreasing = TRUE)
bigram<-tokenize(toLower(test), removePunct = TRUE, removeNumbers = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE, removeHyphens = TRUE, concatenator = " ",ngrams = 2)
bigram<-dfm(bigram,ignoredFeatures=c(stopwords(),"â","s","t"))
bigram<-sort(colSums(bigram),decreasing = TRUE)
trigram<-tokenize(toLower(test), removePunct = TRUE, removeNumbers = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE, removeHyphens = TRUE, concatenator = " ",ngrams = 3)
trigram<-dfm(trigram,ignoredFeatures= c(stopwords(),"â","s","t"))
trigram<-sort(colSums(trigram),decreasing = TRUE)
fourgram<-tokenize(toLower(test), removePunct = TRUE, removeNumbers = TRUE,
removeSymbols = TRUE, removeTwitter = TRUE, removeHyphens = TRUE, concatenator = " ",ngrams = 4)
fourgram<-dfm(fourgram, ignoredFeatures=c(stopwords(),"â","s","t"))
fourgram<-sort(colSums(fourgram),decreasing = TRUE)
unigram<-data.frame(names(unigram),unigram,stringsAsFactors = F)
bigram<-data.frame(names(bigram),bigram,stringsAsFactors = F)
trigram<-data.frame(names(trigram),trigram,stringsAsFactors = F)
fourgram <- data.frame(names(fourgram),fourgram,stringsAsFactors = F)
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject")
saveRDS(unigram,"unigram.RDS")
saveRDS(bigram,"bigram.RDS")
saveRDS(trigram,"trigram.RDS")
saveRDS(fourgram,"fourgram.RDS")
shiny::runApp()
test[133]
shiny::runApp()
unigram <-unigram[unigram[,2]>1,]
saveRDS(test,"test.RDS")
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject1")
unigram <- readRDS("unigram.RDS")
bigram <- readRDS("bigram.RDS")
trigram <- readRDS("trigram.RDS")
fourgram <- readRDS("fourgram.RDS")
trigram[15047,]
trigram[15048,]
for (j in (15047:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
for (j in (18721:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
trigram[21825,]
trigram[21824,]
for (j in (21824:nrow(trigram))) {
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
# if (nrow(find_exactMatch(unigram,temp))==0){next}
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
}
temp<- take_firstWords(trigram[j,1],2)
temp <- paste(temp[1],temp[2])
trigram[j,3]<- trigram[j,2]/(find_exactMatch(bigram,temp)[2])
find_exactMatch(bigram,temp)[2]
temp
find_exactMatch(bigram,temp)[2]
find_exactMatch(bigram,"hard pressed ")[2]
find_exactMatch(bigram,"hard pressed")[2]
for (i in (17973:nrow(bigram1))) {
temp<- take_firstWords(bigram1[i,1],1)
# if (nrow(find_exactMatch(unigram,temp))==0){next}
bigram1[i,3]<- bigram1[i,2]/(find_exactMatch(unigram,temp)[2])
}
bigram1
final_find <- function(sentence){
len <- length(tokenize(take_words(sentence,3))[[1]])
if (len == 3){
phrase <- take_words(sentence,3)
suggestion <- find_suggestion(fourgram,phrase)
if (nrow(suggestion) >0){ result <- final_suggestion(suggestion,5) }
else {
phrase <- take_words(sentence,2)
suggestion <- find_suggestion(trigram,phrase)
if (nrow(suggestion) > 0) { result <- final_suggestion(suggestion,5) }
else {
phrase <- take_words(sentence,1)
suggestion <- find_suggestion(bigram,phrase)
if (nrow(suggestion) > 0) { result <- final_suggestion(suggestion,5) }
else {
suggestion <- unigram[,1][1:5]
result <- final_suggestion(suggestion,5)
}
}
}
}
if (len == 2){
phrase <- take_words(sentence,2)
suggestion <- find_suggestion(trigram,phrase)
if (nrow(suggestion) > 0) { result <- final_suggestion(suggestion,5) }
else {
phrase <- take_words(sentence,1)
suggestion <- find_suggestion(bigram,phrase)
if (nrow(suggestion) > 0) { result <- final_suggestion(suggestion,5) }
else {
suggestion <- unigram[,1][4:8]
result <- final_suggestion(suggestion,5)
}
}
}
if (len == 1){
phrase <- take_words(sentence,1)
suggestion <- find_suggestion(bigram,phrase)
if (nrow(suggestion) > 0) { result <- final_suggestion(suggestion,5) }
else {
suggestion <- unigram[4:8,1]
suggestion <- as.data.frame(suggestion)
result <- final_suggestion(suggestion,5)
}
}
result
}
sentence <- c("After the ice bucket challenge Louis will push his long wet hair out of his eyes
")
final_find(sentence)
sentence <- c("After the ice bucket challenge Louis will push his long wet hair out of his")
final_find(sentence)
final_find("")
final_find("kkkk")
find_suggestion(bigram,phrase)
find_suggestion(bigram1,"man ")
find_suggestion(bigram1,"man")
bigram[20000,]
bigram1[20000,]
final_suggestion(find_suggestion(bigram1,"man"),5)
temp<- data.frame(rep(0,m))
temp<- data.frame(rep(0,5))
temp
temp<- data.frame(rep(0,5),rep(0,5))
temp
final_suggestion <- function(suggestion,m){
if (nrow(suggestion)<m) { m <- nrow(suggestion)}
temp<- data.frame(rep(0,m),rep(0,m))
names(temp) <- c("suggestion")
for (i in seq(m)){ temp[i,1] <-take_lastWord(suggestion[i,1])
temp[i,2] <- suggestion[i,3]    }
temp
}
final_suggestion(find_suggestion(bigram1,"man"),5)
final_suggestion <- function(suggestion,m){
if (nrow(suggestion)<m) { m <- nrow(suggestion)}
temp<- data.frame(rep(0,m),rep(0,m))
names(temp) <- c("suggestion","probability")
for (i in seq(m)){ temp[i,1] <-take_lastWord(suggestion[i,1])
temp[i,2] <- suggestion[i,3]    }
temp
}
final_suggestion(find_suggestion(bigram1,"man"),5)
final_suggestion <- function(suggestion,m){
if (nrow(suggestion)<m) { m <- nrow(suggestion)}
temp<- data.frame(rep(0,m),rep(0,m))
names(temp) <- c("suggestion","probability")
for (i in seq(m)){ temp[i,1] <-take_lastWord(suggestion[i,1])
temp[i,2] <- round(suggestion[i,3],2)    }
temp
}
final_suggestion(find_suggestion(bigram1,"man"),5)
final_suggestion <- function(suggestion,m){
if (nrow(suggestion)<m) { m <- nrow(suggestion)}
temp<- data.frame(rep(0,m),rep(0,m))
names(temp) <- c("suggestion","probability")
for (i in seq(m)){ temp[i,1] <-take_lastWord(suggestion[i,1])
temp[i,2] <- round(suggestion[i,3],5)    }
temp
}
final_suggestion(find_suggestion(bigram1,"man"),5)
b<-final_suggestion(find_suggestion(bigram1,"man"),5)
b
plot(b)
barplot(b)
barplot(b[,2])
bigram[1:20000,]<-bigram1
bigram[1,3]<-1
bigram[1:20000,]<-bigram1
bigram[1:8,]
sentence
paste(sentence,"jhjj")
setwd("D:/my/Documents/Coursera/Data Science Johns Hopkins/Capstone/CapstoneProject1")
saveRDS(unigram,"unigram.RDS")
saveRDS(bigram,"bigram1.RDS")
saveRDS(trigram,"trigram.RDS")
saveRDS(fourgram,"fourgram.RDS")
saveRDS(bigram,"bigram.RDS")
shiny::runApp()
shiny::runApp()
shiny::runApp()
